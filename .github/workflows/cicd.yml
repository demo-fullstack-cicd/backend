name: cicd pipeline
on:
  pull_request:
    branches: [ "dev" ]
    types: [opened, synchronize]
  push:
    branches: ["dev"]

jobs:
  ci:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Ensure resources directory exists
        run: mkdir -p ./src/main/resources/

      - name: Create application.yml from LOCAL_YML
        run: echo "${{ secrets.LOCAL_YML }}" | base64 --decode > ./src/main/resources/application.yml

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build and test with Gradle (LOCAL_YML)
        run: ./gradlew build

  cd:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [ci]
    steps:
      - uses: actions/checkout@v4

      - name: Ensure resources directory exists
        run: mkdir -p ./src/main/resources/

      - name: Replace application.yml with DEV_YML
        run: echo "${{ secrets.DEV_YML }}" | base64 --decode > ./src/main/resources/application.yml

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle (DEV_YML)
        run: ./gradlew build

      - name: Docker build & push to Docker Hub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/docker-test .
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            mkdir -p ~/app
            cd ~/app
            echo "${{ secrets.DOCKER_COMPOSE_YML }}" | base64 --decode > docker-compose.yml
            
            # 기존 컨테이너 중지 (redis 제외)
            if [ "$(sudo docker ps -q -f name=spring-app)" ]; then
              sudo docker stop spring-app
              sudo docker rm spring-app
            fi
            
            # 최신 이미지 가져오기
            sudo docker pull juhhoho/docker-test:latest
            
            # 애플리케이션 컨테이너 재실행
            sudo docker-compose up -d --no-deps app
            
            # Redis 컨테이너 재시작 (필요할 경우)
            if [ "$(sudo docker ps -q -f name=redis)" ]; then
              sudo docker restart redis
            else
              sudo docker-compose up -d redis
            fi
              
            sudo docker ps -a
            
            # 불필요한 이미지 정리
            sudo docker image prune -a -f
  pr-slack:
    if: github.event_name == 'pull_request'
    needs: [ci]
    runs-on: ubuntu-latest
    steps:
      - name: Slack Notification for PR CI
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: GitHub-Actions CI
          fields: repo,message,commit,author,ref,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()

  push-slack:
    if: github.event_name == 'push'
    needs: [cd]
    runs-on: ubuntu-latest
    steps:
      - name: Slack Notification for Push CI/CD
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: GitHub-Actions CI/CD
          fields: repo,message,commit,author,ref,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()