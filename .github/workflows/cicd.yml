name: cicd pipeline
on:
  push:
    branches: ["main"]

jobs:
  ci:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Ensure resources directory exists
        run: mkdir -p ./src/main/resources/

      - name: Create application.yml from LOCAL_YML
        run: echo "${{ secrets.LOCAL_YML }}" | base64 --decode > ./src/main/resources/application.yml

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build and test with Gradle (LOCAL_YML)
        run: ./gradlew build

  cd:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [ci]
    steps:
      - uses: actions/checkout@v4

      - name: Ensure resources directory exists
        run: mkdir -p ./src/main/resources/

      - name: Replace application.yml with DEV_YML
        run: echo "${{ secrets.DEV_YML }}" | base64 --decode > ./src/main/resources/application.yml

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle (DEV_YML)
        run: ./gradlew build

      - name: Docker build & push to Docker Hub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/docker-test .
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test

      - name: Create deployment package
        run: |
          mkdir -p codedeploy
          echo "${{ secrets.DOCKER_COMPOSE_YML }}" | base64 --decode > codedeploy/docker-compose.yml
          echo "${{ secrets.APPSPEC }}" | base64 --decode > codedeploy/appspec.yml
          zip -r deploy.zip codedeploy

      - name: Upload to S3
        uses: aws-actions/aws-cli-action@v2
        with:
          command: s3 cp deploy.zip s3://${{ secrets.S3_BUCKET_NAME }}/deploy.zip

      - name: Deploy to AWS CodeDeploy
        uses: aws-actions/aws-cli-action@v2
        with:
          command: >
            deploy create-deployment
            --application-name my-codedeploy-app
            --deployment-group-name my-deployment-group
            --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},key=deploy.zip,bundleType=zip
  pr-slack:
    if: github.event_name == 'pull_request'
    needs: [ci]
    runs-on: ubuntu-latest
    steps:
      - name: Slack Notification for PR CI
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: GitHub-Actions CI
          fields: repo,message,commit,author,ref,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()

  push-slack:
    if: github.event_name == 'push'
    needs: [cd]
    runs-on: ubuntu-latest
    steps:
      - name: Slack Notification for Push CI/CD
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: GitHub-Actions CI/CD
          fields: repo,message,commit,author,ref,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
